Implement with cpp/templates:
SORT ALGORITHMS [CLRS]:
===========================
*** INSERT
------------------
* Description:
Input: Array of keys with length N (assumes integers)
 There are outer and inner iteration.
The idea is on the end of outer iteration to have
a sorted sub array with bound start =0 and end index going forward.
 At the beginning of the outer iteration we add next element(change the sub array bound)
to the sub array.
 Inner loops place (inserts) the new element (last element of the sub array) in correct position of the sub array,
by moving elements to right in order to make vacant place for insertion.
Sub arrays is already sorted, except last element.
* Code:

insertion-sort(A)
// ascending order
for j=1 to A.length // Starts with sub array [0..1] , after that [0..2] ... [0..n-1]
{
    key=A[j] // Keep key as local value, this could be inserted
    // Insert A[j] into the sorted sequence A[0.. j-1]
    i=j-1 // Set index to compare, starts with prev element
    // Compare with all elements from right to left.
    while i>=0 and A[i] > key    // Compare prev element with the key
    {
        A[i+1]=A[i]     // Move prev element to right to make vacant place to insert the key
        i=i-1           // Move index to left, which is previous element.
    }
    A[i+1]=key          // Place the key in vacant place
}

* Efficiency - O(n^2)

10000 elements
time ./sort_insert

real    0m0,115s
user    0m0,110s
sys     0m0,004s


* Implementation
[SCPP][Section 25.2.3 Operations as Arguments 727]


*** SELECT
------------------
* Description:
Input: Array of keys with length N (assumes integers)
Select positions starting from first to last
Exchange element from selected position [i] with max/min element from positions [i+1,n]
Two loops required, first to select position for exchange, second to find min/max element
* Code:
select-sort(A)
// ascending order
for i=1 to A.length
{
    min=i;
    for j=i+1 to A.length
    {
        if(A[min]>A[j])
        {
            min=j
        }
    }
    exchange(A[i],A[min]);
}
* Efficiency - O(n^2)

10000 elements
time ./sort_select

real    0m0,226s
user    0m0,222s
sys     0m0,004s

* Implementation
[RSALG][ALG 2.1 Page 249]

*** BUBBLE
------------------
* Description:
Input: Array of keys with length N (assumes integers)
Compare and swap each adjacent pair (n-1) times.
On each iteration max/min element will be placed (bubbles out) at the end (begin).
Iteration 1: max/min element at n-1 pos
Iteration 2: next max/min element at n-2 pos
Iteration 3: next max/min element at n-3 pos
...
Iteration n: next max/min element at 0 pos
* Code:
bubble-sort(A)
// ascending order
for i=1 to A.length
{
    for j=1 to A.length-i
    {
        if(A[j]>A[j+1])
        {
            exchange(A[j],A[j+1])
        }
    }
}
* Efficiency - O(n^2)
 10000 elements
 time ./sort_bubble

real    0m0,487s
user    0m0,487s
sys     0m0,000s

* Implementation
[RSALG][ALG 2.1 Page 249]

*** SHELL (insert opt)
------------------
* Description:
Same as Insert but optimized for better performance.
Elements are moved at offset h, instead 1, on each h iteration sub elements are h-sorted.
h is reduced to 1, where final sort iteration applies.
Good performance for h is while (h < N/3) h = 3*h + 1; // 1, 4, 13, 40, 121, 364, 1093,
Worst performance for h is 1 2 4 8 16 32 ... 2048, due to sorting only even elements which cause last
iteration with h=1 to be heavy.
* Code:

shell-sort(A)
// ascending order
// replace offset 1 with h
while (h < N/3) h = 3*h + 1;
for(;h>0;h/=3)
{
    for j=h to A.length, j+=h // Starts with sub array [0..1] , after that [0,h..k*h] ... [0..n-h]
    {
        key=A[j] // Keep key as local value, this could be inserted
        // Insert A[j] into the sorted sequence A[0.. j-h]
        i=j-h // Set index to compare, starts with prev element
        // Compare with all elements from right to left.
        while i>=0 and A[i] > key    // Compare prev element with the key
        {
            A[i+h]=A[i]     // Move prev element to right to make vacant place to insert the key
            i=i-h           // Move index to left, which is previous element.
        }
        A[i+h]=key          // Place the key in vacant place
    }
}

* Efficiency - O(n^2)

10000 elements
time ./sort_insert

real    0m0,103s
user    0m0,102s
sys     0m0,001s


* Implementation
[][]

------------------
*** MERGE
------------------
* Description:
Same as Insert but optimized for better performance.
Elements are moved at offset h, instead 1, on each h iteration sub elements are h-sorted.
h is reduced to 1, where final sort iteration applies.
Good performance for h is while (h < N/3) h = 3*h + 1; // 1, 4, 13, 40, 121, 364, 1093,
Worst performance for h is 1 2 4 8 16 32 ... 2048, due to sorting only event elements which cause last
iteration with h=1 to be heavy.
* Code:

merge-sort(A,p,r)
if(p<r)
    q=(r-p)/2
    merge-sort(A,p,q);
    merge-sort(A,q+1,r);
    merge(A,p,q,r);

merge(A,p,q,r)
// ascending order
n1=p-q+1;
n2=r-q+1;
allocate L[n1]
allocate R[n2]
for i=0 to n1
    L[i]=A[p+i]
for j=0 to n2
    L[j]=A[q+j]
for k=p to r
if L[i]>=L[j]
    A[k]=L[i]
    i++;
else
    A[k]=R[j]
    j++;


* Efficiency - O(n*lg(n))

10000 elements
time ./sort_merge

real    0m0,018s
user    0m0,014s
sys     0m0,004s

* Implementation
[CLRS][page 31]

------------------
*** QUICK
------------------
* Description:


Last element "X" is pivot around which elements are arranged.
Split input in 2 areas less(greater) than "X", last element pointed by index "i"
 and greater(less) than X, last element pointed by "j-1",first element by i+1.
This operations is called partition and allows both areas to be recursively sorted without merging.
"j" points to current iterated element
"j" changes from [0..n-2]
"i" increments if "j" points to less/greater element than pivot, in this case "i+1" element is swapped with "j" element
On Last iteration A[i+1] is swapped with A[r]
Sample state after iteration:
PARTITION (A, p, r)

p i     j     r
2 1 7 8 3 5 6 4
    |   |

A[i+1]=7 swapped with A[j]=3
p   i     j   r
2 1 3 8 7 5 6 4
      |   |

p   i       j r
2 1 3 8 7 5 6 4
      |     |


A[i+1] swapped with A[r]
p   i       j r
2 1 3 4 7 5 6 8
      |       |

* Code:

quick-sort(A,p,r)
if(p<r)
    q=partition(A,p,r)
    quick-sort(A,p,q-1);
    quick-sort(A,q+1,r);

Partition(A,p,r)
x=A[r] // last element ispivot
i=p-1; // decrement to point on first after incrementing i
for j=p to r-1
    if A[j] <= x
        i=i+1
        // element could be swapped with itself if i+1==j
        exchange A[j], A[i]
exchange A[i+1], A[r] // swap first greater(less) element than pivot

* Efficiency
    - expected O(n*lg(n))
    - worst O(n^2)

10000 elements
time ./sort_quick

real    0m0,009s
user    0m0,004s
sys     0m0,004s

* Implementation
[CLRS][page 171]


 - heap sort
 - count
 - radix
 - bucket

* elementary data structures [CLRS]:
 - stack [LIFO]
 - queue [FIFO]
 - dequeue [Container]
 - priority queue [CLSRS,CTAA]
 - linked list [Container]
 - doubly linked list
 - binary search tree (ref to heap sort)
 - hash map [Container]
 - multi-key map [table, Container] [CTAA]
 - red-black tree [binary search tree, Container]
 - B-trees [Container]
 - Quadtrees and Octrees [CTAA]

* graph algorithms [CLRS]
 - graph structure as linked list
 - BFS
 - DFS
 - topological sort
 - minimum spanning trees [connecting trees]
 - Kruskal and Prim [MSP]
 - Bellman-Ford [shortest path]
 - Dijkstra [shortest path]

* Containers
 - vector
 - list
 - set, multi set
 - map, multi map
 - hash set, hash multi set, hash map, hash multimap 
 - tuple [SCPP]

* Template techniques:
 - to do...

Legend:
* CLRS - Cormen
* CTAA - Core Techniques and Algorithms
* SCPP - Stroustrup
* RSALG - [Robert Sedgewick,Kevin Wayne] Algorithms 4th_Ed

Note:
* Implement structures as containers with Policy.
* Check Stroustrup for Container implementation with Policy template parameter.
* Make Iterator support for all structures (where possible)
